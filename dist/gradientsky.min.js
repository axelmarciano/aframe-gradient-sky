/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	
	var vertexShader = __webpack_require__(1);
	var fragmentShader = __webpack_require__(2)
	
	AFRAME.registerShader('gradient', {
	  schema: {
	    topColor: {type: 'vec3', default: '255 0 0', is: 'uniform'},
	    bottomColor: {type: 'vec3', default: '0 0 255', is: 'uniform'},
	    offset: {type: 'float', default: '400', is: 'uniform'},
	    exponent: {type: 'float', default: '0.6', is: 'uniform'}
	  },
	  vertexShader: vertexShader,
	  fragmentShader: fragmentShader
	});
	
	AFRAME.registerPrimitive('a-gradient-sky', {
	    defaultComponents: {
	      geometry: {
	        primitive: 'sphere',
	        radius: 5000,
	        segmentsWidth: 64,
	        segmentsHeight: 20
	      },
	      material: {
	        shader: 'gradient'
	      },
	      scale: '-1 1 1'
	    },
	
	    mappings: {
	      topColor: 'material.topColor',
	      bottomColor: 'material.bottomColor',
	      offset: 'material.offset',
	      exponent: 'material.exponent'
	    }
	});

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = "varying vec3 vWorldPosition;\n\nvoid main() {\n\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\tvWorldPosition = worldPosition.xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = "uniform vec3 bottomColor;\nuniform vec3 topColor;\nuniform float offset;\nuniform float exponent;\nvarying vec3 vWorldPosition;\n\nvoid main() {\n    float h = normalize( vWorldPosition + offset ).y;\n    float rB = bottomColor.x/255.0;\n    float gB = bottomColor.y/255.0;\n    float bB = bottomColor.z/255.0;\n    vec3 bColor = vec3(rB,gB,bB);\n    float rT = topColor.x/255.0;\n    float gT = topColor.y/255.0;\n    float bT = topColor.z/255.0;\n    vec3 tColor = vec3(rT,gT,bT);\n    gl_FragColor = vec4( mix( bColor, tColor, max( pow( max( h, 0.0 ), exponent ), 0.0 ) ), 1.0 );\n}"

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNzIzNDYyYTRhNzJkNWNjYTY4NWIiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYnVpbGQvc2hhZGVycy92ZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly8vLi9idWlsZC9zaGFkZXJzL2ZyYWdtZW50Lmdsc2wiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDckNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFlLGdEQUFnRDtBQUMvRCxtQkFBa0IsZ0RBQWdEO0FBQ2xFLGNBQWEsNkNBQTZDO0FBQzFELGdCQUFlO0FBQ2YsSUFBRztBQUNIO0FBQ0E7QUFDQSxFQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTztBQUNQO0FBQ0E7QUFDQSxRQUFPO0FBQ1A7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUMsRTs7Ozs7O0FDbkNELCtDQUE4QyxpQkFBaUIsNkRBQTZELHVDQUF1Qyw2RUFBNkUsR0FBRyxDOzs7Ozs7QUNBblAsNENBQTJDLHdCQUF3Qix1QkFBdUIseUJBQXlCLDhCQUE4QixpQkFBaUIsdURBQXVELHFDQUFxQyxxQ0FBcUMscUNBQXFDLG1DQUFtQyxrQ0FBa0Msa0NBQWtDLGtDQUFrQyxtQ0FBbUMsb0dBQW9HLEdBQUcsQyIsImZpbGUiOiJncmFkaWVudHNreS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA3MjM0NjJhNGE3MmQ1Y2NhNjg1YiIsIlxudmFyIHZlcnRleFNoYWRlciA9IHJlcXVpcmUoJy4vc2hhZGVycy92ZXJ0ZXguZ2xzbCcpO1xudmFyIGZyYWdtZW50U2hhZGVyID0gcmVxdWlyZSgnLi9zaGFkZXJzL2ZyYWdtZW50Lmdsc2wnKVxuXG5BRlJBTUUucmVnaXN0ZXJTaGFkZXIoJ2dyYWRpZW50Jywge1xuICBzY2hlbWE6IHtcbiAgICB0b3BDb2xvcjoge3R5cGU6ICd2ZWMzJywgZGVmYXVsdDogJzI1NSAwIDAnLCBpczogJ3VuaWZvcm0nfSxcbiAgICBib3R0b21Db2xvcjoge3R5cGU6ICd2ZWMzJywgZGVmYXVsdDogJzAgMCAyNTUnLCBpczogJ3VuaWZvcm0nfSxcbiAgICBvZmZzZXQ6IHt0eXBlOiAnZmxvYXQnLCBkZWZhdWx0OiAnNDAwJywgaXM6ICd1bmlmb3JtJ30sXG4gICAgZXhwb25lbnQ6IHt0eXBlOiAnZmxvYXQnLCBkZWZhdWx0OiAnMC42JywgaXM6ICd1bmlmb3JtJ31cbiAgfSxcbiAgdmVydGV4U2hhZGVyOiB2ZXJ0ZXhTaGFkZXIsXG4gIGZyYWdtZW50U2hhZGVyOiBmcmFnbWVudFNoYWRlclxufSk7XG5cbkFGUkFNRS5yZWdpc3RlclByaW1pdGl2ZSgnYS1ncmFkaWVudC1za3knLCB7XG4gICAgZGVmYXVsdENvbXBvbmVudHM6IHtcbiAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgIHByaW1pdGl2ZTogJ3NwaGVyZScsXG4gICAgICAgIHJhZGl1czogNTAwMCxcbiAgICAgICAgc2VnbWVudHNXaWR0aDogNjQsXG4gICAgICAgIHNlZ21lbnRzSGVpZ2h0OiAyMFxuICAgICAgfSxcbiAgICAgIG1hdGVyaWFsOiB7XG4gICAgICAgIHNoYWRlcjogJ2dyYWRpZW50J1xuICAgICAgfSxcbiAgICAgIHNjYWxlOiAnLTEgMSAxJ1xuICAgIH0sXG5cbiAgICBtYXBwaW5nczoge1xuICAgICAgdG9wQ29sb3I6ICdtYXRlcmlhbC50b3BDb2xvcicsXG4gICAgICBib3R0b21Db2xvcjogJ21hdGVyaWFsLmJvdHRvbUNvbG9yJyxcbiAgICAgIG9mZnNldDogJ21hdGVyaWFsLm9mZnNldCcsXG4gICAgICBleHBvbmVudDogJ21hdGVyaWFsLmV4cG9uZW50J1xuICAgIH1cbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYnVpbGQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBcInZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCB3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxuXFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxufVwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9idWlsZC9zaGFkZXJzL3ZlcnRleC5nbHNsXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gXCJ1bmlmb3JtIHZlYzMgYm90dG9tQ29sb3I7XFxudW5pZm9ybSB2ZWMzIHRvcENvbG9yO1xcbnVuaWZvcm0gZmxvYXQgb2Zmc2V0O1xcbnVuaWZvcm0gZmxvYXQgZXhwb25lbnQ7XFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgZmxvYXQgaCA9IG5vcm1hbGl6ZSggdldvcmxkUG9zaXRpb24gKyBvZmZzZXQgKS55O1xcbiAgICBmbG9hdCByQiA9IGJvdHRvbUNvbG9yLngvMjU1LjA7XFxuICAgIGZsb2F0IGdCID0gYm90dG9tQ29sb3IueS8yNTUuMDtcXG4gICAgZmxvYXQgYkIgPSBib3R0b21Db2xvci56LzI1NS4wO1xcbiAgICB2ZWMzIGJDb2xvciA9IHZlYzMockIsZ0IsYkIpO1xcbiAgICBmbG9hdCByVCA9IHRvcENvbG9yLngvMjU1LjA7XFxuICAgIGZsb2F0IGdUID0gdG9wQ29sb3IueS8yNTUuMDtcXG4gICAgZmxvYXQgYlQgPSB0b3BDb2xvci56LzI1NS4wO1xcbiAgICB2ZWMzIHRDb2xvciA9IHZlYzMoclQsZ1QsYlQpO1xcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCBtaXgoIGJDb2xvciwgdENvbG9yLCBtYXgoIHBvdyggbWF4KCBoLCAwLjAgKSwgZXhwb25lbnQgKSwgMC4wICkgKSwgMS4wICk7XFxufVwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9idWlsZC9zaGFkZXJzL2ZyYWdtZW50Lmdsc2xcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==